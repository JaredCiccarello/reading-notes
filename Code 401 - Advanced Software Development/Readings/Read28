1. How do Django Forms facilitate user input handling, and what are some key components of creating a form using the Django framework?
  Forms facilitate user input handling by:
Define a form class: You need to create a form class that inherits from Django's forms.Form or forms.ModelForm class. This class represents the structure and behavior of the form. You define form fields as class attributes, specifying the field type and any validation rules.

Render the form in a template: In your Django template, you can render the form by using the {{ form }} template variable. This variable will output the necessary HTML markup for the form fields based on the form class definition.

Handle form submission: When a user submits a form, you need to handle the form data on the server side. In your view function or class-based view, you instantiate the form class and pass the submitted data for processing. You can then validate the form using the is_valid() method, which triggers the validation of all form fields based on the defined rules.

Process valid form data: If the form is valid, you can access the cleaned and validated data through the form's cleaned_data attribute. You can perform further processing, such as saving the data to a database or performing additional business logic.

Display form errors: If the form is not valid, you can access the form errors through the form's errors attribute. You can display these errors in the template to provide feedback to the user about the incorrect input.

Customize form presentation: Django forms provide various ways to customize the presentation of form fields. You can modify field labels, add help text, specify widget types, define field ordering, and apply CSS classes or styles.

2. Explain the purpose of Django Templates in web development and describe how template inheritance can be utilized to improve code reusability and maintainability.
  Purpose of Django templates in web development by promoting clean and organized codebase. It allows you to include variables, loops, and conditionals. Templates allow you to reuse code by defining components that can be shared across multiple pages. Templates are useful for updating the visual as portions of your code without making changes to the python code.

  Template inheritance on the other hand can enhance code reusability and maintainability. Using template inheritance also allows you to make child templates that help by reusing common layout and structure.
  Other benefits include: 
  Flexibility: Template inheritance allows you to customize specific sections of a page while retaining the rest of the layout from the base template. 
  Hierarchical structure: Templates can be organized in a hierarchical structure, with a base template at the top and multiple levels of child templates below. 

3. Describe the function of Django Views in handling HTTP requests, and outline the differences between function-based views and class-based views.
  Django views, handle http requests by handling and returning responses. Django views also handle logic integration by interacting with databases, calling external API's, or even preforming calculations.
  Views also render responses by rendering a template with content, returning JSON data for an API request, redirecting to another page, or even returning an error message.

  The differences between function-based views and class-based views are:
Function-based viewss are the traditional way of defining views in Django.
They are Python functions that take an HTTP request as input and return an HTTP response.
FBVs are simple and easy to understand, especially for basic views.
They are defined as standalone functions that can be reused across multiple URLs.
FBVs offer more flexibility for custom logic and low-level control over the request and response handling.

Class-based viewss are an alternative approach to defining views introduced in Django to provide a more structured and reusable way of writing views.
CBVs are defined as classes that inherit from Django's View or its subclasses.
They encapsulate common behavior and functionalities related to handling HTTP requests and responses, reducing code duplication.
CBVs provide pre-defined methods for common HTTP methods (GET, POST, etc.), allowing you to override and customize their behavior.
They promote code reuse and modularity by allowing mixins, which are reusable classes that can be combined with CBVs to add or modify specific functionality.
CBVs offer a more object-oriented approach, making it easier to organize and extend views in complex applications.
